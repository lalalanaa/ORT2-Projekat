! Provera starta !
lStart: br (if !START then lStart);



! FETCH !
lFetch: PCout1, MOST1_2, ldMAR, incPC;
l1: eMAR, rdCPU, br (if !fcCPU then l1);
MDRout1, ldIR0;
br (if !gropr then l5);
stPRCOD, br lINTR;
l5: br (if l1 then lEXEC);
PCout1, MOST1_2, ldMAR, incPC;
l2: eMAR, rdCPU, br (if !fcCPU then l2);
MDRout1, ldIR1, ldGPRAR;
br (if !gradr then l6);
stPRADR, br lINTR;
l6: br (if l2_arlog then lADDR);
br (if l2_brnch then lEXEC);
PCout1, MOST1_2, ldMAR, incPC;
l3: eMAR, rdCPU, br (if !fcCPU then l3);
MDRout1, ldIR2, br (if l3_jump then lEXEC);
PCout1, MOST1_2, ldMAR, incPC;
l4: eMAR, rdCPU, br (if !fcCPU then l4);
MDRout1, ldIR3;



! ADDR !
lADDR: bradr;

! <shortimmed> !
IRPOMout3, MOST3_2, MOST2_1, ldBB, br lEXEC;

! <regdir> !
br (if ST then lEXEC);
GPRout1, ldBB, br lEXEC;

! <regind> !
GPRout1, MOST1_2, ldMAR, ldBW, br lREAD;

! <predec> !
GPRout1, MOST1_3, ldSP;
decSP;
decSP;
SPout2, ldMAR, ldBW, MOST2_1, MOST1_3, wrGPR, br lREAD;

! <memdir> !
IRDAout3, MOST3_2, ldMAR, ldBW, br lREAD;

! <memind> !
IRDAout3, MOST3_2, ldMAR;
l7: eMAR, rdCPU, br (if !fcCPU then l7);
MDRout1, ldDWL, incMAR;
l8: eMAR, rdCPU, br (if !fcCPU then l8);
MDRout1, ldDWH;
DWout2, ldMAR, ldBW, br lREAD;

! <immed> !
IRDAout3, MOST3_2, MOST2_1, ldBB, br lEXEC;

! <bxpostinc> !
ADDout2, MOST2_1, MOST1_3, ldSP;
decSP;
decSP;
decSP;
SPout2, MOST2_1, ldGPRAR;
GPRout1, MOST1_2, ldCW, incGPRAR;
GPRout1, CWout3, ADDout2, ldMAR, ldBW;
GPRout1, MOST1_3, ldSP;
incSP;
incSP;
SPout2, MOST2_1, MOST1_3, wrGPR, br lREAD; 

! <read> !
lREAD: br (if stlen then lEXEC);
l9: eMAR, rdCPU, br (if !fcCPU then l9);
MDRout1, ldDWL, incMAR;
l10: eMAR, rdCPU, br (if !fcCPU then l10);
MDRout1, ldDWH;
DWout2, MOST2_1, ldBB, br lEXEC;



! EXEC !
lEXEC: bropr;

! <LD> !
BBout2, MOST2_1, ldAB;
l14: ldN, ldZ, br lINTR;

! <ST> !
br (if !regdir then l11);
ABout3, wrGPR, br lINTR;
l11: ABout3, MOST3_2, ldAW;
l16: AWout3, mxMDR, ldMDR;
l12: eMAR, eMDR, wrCPU, br (if !fcCPU then l12);
AWHout3, mxMDR, ldMDR, incMAR;
l13: eMAR, eMDR, wrCPU, br (if !fcCPU then l13);
br lINTR;

! <ADD> !
ABout3, BBout2, add, ALUout1, ldAB, ldV, ldC, br l14;

! <SUB> !
ABout3, BBout2, sub, ALUout1, ldAB, ldV, ldC, br l14;

! <AND> !
ABout3, BBout2, and, ALUout1, ldAB, br l14;

! <OR> !
ABout3, BBout2, or, ALUout1, ldAB, br l14;

! <XOR> !
ABout3, BBout2, xor, ALUout1, ldAB, br l14;

! <INC> !
BBout2, MOST2_1, MOST1_3, ldSP;
incSP;
br (if !regdir then l15);
SPout2, MOST2_1, MOST1_3, wrGPR, br lINTR;
l15: SPout2, ldAW;
BWout2, ldMAR, br l16;

! <NEG> !
BBout2, MOST2_1, ldAB;
ABout3, not, ALUout1, ldAB;
ABout3, ldSP;
incSP;
SPout2, MOST2_1, ldAB, br l14;

! <MAX> !
ABout3, MOST3_2, ldAW;
ABout3, BBout2, sub, ALUout1, ldAB, ldC, ldV;
ldN, ldZ;
ADDout2, MOST2_1, MOST1_3, br (if !brpom then l17);
AWout3, MOST3_2, MOST2_1, ldAB, br lINTR;
l17: BBout2, MOST2_1, ldAB, br lINTR; 

! <CMP> !
ABout3, MOST3_2, ldAW;
ABout3, BBout2, sub, ALUout1, ldAB, ldC, ldV;
ldN, ldZ;
AWout3, MOST3_2, MOST2_1, ldAB, br lINTR;

! <branch> !
IRBRout3, br (if !brpom then lINTR);
PCout1, IRPOMout3, ADDout2, ldPC, br lINTR;

! <ASR, LSR, ROR, RORC> !
shr, ldC, br l14;

! <ASL, LSL, ROL, ROLC> !
shl, ldC, br l14;

! <INTE> !
stPSWI, br lINTR;

! <INTD> !
clPSWI, br lINTR;

! <STIVTP> !
ABout3, ldIVTP, br lINTR;

! <CLR> !
ALUout1, ldAB, br l14;

! <HALT> !
clSTART, br lSTART;

! <JMP> !
IRJAout2, ldPC, br lINTR;

! <PUSH> !
ADDout2, MOST2_1, MOST1_3, ldSP;
decSP;
SPout2, MOST2_1, ldGPRAR;
GPRout1, MOST1_3, ldSP;
incSP;
SPout2, ldMAR;
incSP;
SPout2, MOST2_1, MOST1_3, wrGPR, br l11;

! <POP> !
ADDout2, MOST2_1, MOST1_3, ldSP;
decSP;
SPout2, MOST2_1, ldGPRAR;
GPRout1, MOST1_3, ldSP;
SPout2, ldMAR, decSP;
l18: eMAR, rdCPU, br (if !fcCPU then l18);
MDRout1, ldDWH, SPout2, ldMAR, decSP;
SPout2, MOST2_1, MOST1_3, wrGPR;
l19: eMAR, rdCPU, br (if !fcCPU then l19);
MDRout1, ldDWL;
DWout2, MOST2_1, ldAB, br l14;

! <JSR> !
ADDout2, MOST2_1, MOST1_3, ldSP;
decSP;
SPout2, MOST2_1, ldGPRAR;
GPRout1, MOST1_3, ldSP;
incSP;
SPout2, ldMAR;
incSP;
SPout2, MOST2_1, MOST1_3, wrGPR;
PCLout3, mxMDR, ldMDR;
l20: eMAR, eMDR, wrCPU, br (if !fcCPU then l20);
PCHout3, mxMDR, ldMDR, incMAR;
l21: eMAR, eMDR, wrCPU, br (if !fcCPU then l21);
IRJAout2, ldPC, br lINTR;

! <RTS> !
ADDout2, MOST2_1, MOST1_3, ldSP;
decSP;
SPout2, MOST2_1, ldGPRAR;
GPRout1, MOST1_3, ldSP;
l24: SPout2, ldMAR, decSP;
l22: eMAR, rdCPU, br (if !fcCPU then l22);
MDRout1, ldDWH, SPout2, ldMAR, decSP;
SPout2, MOST2_1, MOST1_3, wrGPR;
l23: eMAR, rdCPU, br (if !fcCPU then l23);
MDRout1, ldDWL;
DWout2, ldPC, br lINTR;

! <RTI> !
ADDout2, MOST2_1, MOST1_3, ldSP;
decSP;
SPout2, MOST2_1, ldGPRAR;
GPRout1, MOST1_3, ldSP;
SPout2, ldMAR, decSP;
l25: eMAR, rdCPU, br (if !fcCPU then l25);
MDRout1, ldPSWH, SPout2, ldMAR, decSP;
l26: eMAR, rdCPU, br (if !fcCPU then l26);
MDRout1, ldPSWL, br l24;

! <LEN> !
ADDout2, MOST2_1, MOST1_3, ldSP;
incSP;
SPout2, MOST2_1, ldAB;
shl, decSP;
shl;
shl;
ABout3, MOST3_2, ldCW;
l27: eMAR, rdCPU, br (if !fcCPU then l27);
MDRout1, ldDWL, incMAR;
l28: eMAR, rdCPU, br (if !fcCPU then l28);
MDRout1, ldDWH, incMAR;
DWout2, MOST2_1, ldAB;
ldZ;
CWout3, br (if !brpom then l29);
SPout2, MOST2_1, ldAB, br lINTR;
l29: incSP, br l27;

! <MOD> !
BWout2, MOST2_1, MOST1_3, ldSP, ldCW;

! aw<=kraj !
l60: eMAR, rdCPU, br (if !fcCPU then l60);
MDRout1, ldDWL, incMAR, incSP;
l61: eMAR, rdCPU, br (if !fcCPU then l61);
MDRout1, ldDWH, incMAR, incSP;
DWout2, MOST2_1, ldAB;
ldZ;
br (if !PSWZ then l60);

decSP;
decSP;
SPout2, ldAW;

! da li je aw = 512? !
l70: BWout2, MOST2_1, MOST1_3, ldSP, ldMAR;
incSP;
incSP;
SPout2, MOST2_1, ldAB;
AWout3, MOST3_2, MOST2_1, ldBB, decSP;
ABout3, BBout2, sub, ALUout1, ldAB, decSP;
ldZ;
br (if PSWZ then lINTR);

! a <= tr, b <= max, a>b? !
l62: eMAR, rdCPU, br (if !fcCPU then l62);
MDRout1, ldDWL, incMAR, incSP;
l63: eMAR, rdCPU, br (if !fcCPU then l63);
MDRout1, ldDWH, incMAR, incSP;
DWout2, MOST2_1, ldAB;

CWout3, MOST3_2, ldMAR;

l64: eMAR, rdCPU, br (if !fcCPU then l64);
MDRout1, ldDWL, incMAR;
l65: eMAR, rdCPU, br (if !fcCPU then l65);
MDRout1, ldDWH, incMAR;
DWout2, MOST2_1, ldBB;

SPout2, ldMAR;

ABout3, BBout2, sub, ALUout1, ldAB;
ldN;
br (if PSWN then l66);
! a > b, cw <= a !
decSP;
decSP;
SPout2, ldCW;
incSP;
incSP;

! da li je aw = bw? !
l66: SPout2, MOST2_1, ldAB;
AWout3, MOST3_2, MOST2_1, ldBB;
ABout3, BBout2, sub, ALUout1, ldAB;
ldZ;
br (if !PSWZ then l62);

! aw = bw, b <= tr !
decSP;
decSP;
SPout2, ldMAR;
l67: eMAR, rdCPU, br (if !fcCPU then l67);
MDRout1, ldDWL, incMAR;
l68: eMAR, rdCPU, br (if !fcCPU then l68);
MDRout1, ldDWH, incMAR;
DWout2, MOST2_1, ldBB;

! aw = bw, a <= max !
CWout3, MOST3_2, ldMAR;
l69: eMAR, rdCPU, br (if !fcCPU then l69);
MDRout1, ldDWL, incMAR;
l71: eMAR, rdCPU, br (if !fcCPU then l71);
MDRout1, ldDWH, incMAR;
DWout2, MOST2_1, ldAB;


! switch !
CWout3, MOST3_2, ldMAR;
BBout2,  ldAW;
AWout3, mxMDR, ldMDR;
l72: eMAR, eMDR, wrCPU, br (if !fcCPU then l72);
AWHout3, mxMDR, ldMDR, incMAR;
l73: eMAR, eMDR, wrCPU, br (if !fcCPU then l73);

SPout2, ldMAR;
ABout3, MOST3_2, ldAW;
AWout3, mxMDR, ldMDR;
l74: eMAR, eMDR, wrCPU, br (if !fcCPU then l74);
AWHout3, mxMDR, ldMDR, incMAR;
l75: eMAR, eMDR, wrCPU, br (if !fcCPU then l75);

! maks = 510, aw = aw - 2 !
BWout2, ldCW;
SPout2, ldAW, br l70;




! INTR !
lINTR: br (if !prekid then lSTART);

! INTR faza 1 !
br lStart;




































